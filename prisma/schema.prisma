generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRoles {
  ADMIN
  MEMBER
}

model User {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  email            String    @unique
  name             String
  password         String
  role             UserRoles @default(MEMBER)
  photoUrl         String?   @map("photo_url")
  photoId          String?   @map("photo_id")
  stripeCustomerId String?   @map("stripe_customer_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  subscription Subscription?

  domains Domain[]
  links   Link[]

  @@map("users")
}

model Subscription {
  id             String @id @default(auto()) @map("_id") @db.ObjectId
  subscriptionId String @unique @map("subscription_id")
  status         String
  priceId        String @map("price_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique @db.ObjectId

  @@map("subscriptions")
}

model Domain {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  domainName String @unique

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id") @db.ObjectId

  links Link[]

  @@map("domains")
}

// model Page {
//   id    String @id @default(uuid()) @map("_id") @db.ObjectId
//   slug  String @unique
//   title String

//   createdAt DateTime @default(now()) @map("created_at")

//   pageLinks PageLink[]

//   @@map("pages")
// }

// model PageLink {
//   id    String @id @default(uuid()) @map("_id") @db.ObjectId
//   title String
//   url   String

//   page   Page   @relation(fields: [pageId], references: [id])
//   pageId String @map("page_id") @db.ObjectId

//   @@map("page_links")
// }

model Link {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  slug        String
  url         String
  ip          String
  title       String?
  description String?

  util Util?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  domain   Domain? @relation(fields: [domainId], references: [id], onDelete: Cascade)
  domainId String? @map("domain_id") @db.ObjectId

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id") @db.ObjectId

  clicks Click[]

  @@map("links")
}

model Util {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  password String?

  updatedAt DateTime @updatedAt @map("updated_at")

  link   Link   @relation(fields: [linkId], references: [id], onDelete: Cascade)
  linkId String @unique @map("link_id") @db.ObjectId

  @@map("utils")
}

model Click {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  ip           String
  device       String
  browser      String?
  platform     String?
  country      String?
  redirectedBy String? @map("redirected_by")

  createdAt DateTime @default(now()) @map("created_at")

  link   Link   @relation(fields: [linkId], references: [id], onDelete: Cascade)
  linkId String @map("link_id") @db.ObjectId

  @@map("clicks")
}
